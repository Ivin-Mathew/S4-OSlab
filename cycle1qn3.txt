#!/bin/bash

INPUT=$1
count=0
pass=0

IFS=','
[ ! -f $INPUT ] && { echo "$INPUT file not found"; exit 99; }
while read id s1 s2 s3
do
  echo "Processing line: $id, $s1, $s2, $s3"
  
  if [ "$id" == "id" ]
  then
    continue
  fi
  
  echo "ID : $id"
  echo "s1 : $s1"
  echo "s2 : $s2"
  echo "s3 : $s3"
  echo ""
  
  count=$((count+1))
done < $INPUT

echo "Total lines processed: $count"





#!/bin/bash

# Function to summarize a directory
summarize_dir() {
    # Check if the directory exists
    if [[ ! -d $1 ]]; then
        echo "Directory $1 does not exist."
        return 1
    fi

    # Initialize an associative array to store the count of each extension
    declare -A ext_counts

    # Iterate over the files in the directory and its subdirectories
    while IFS= read -r -d '' file; do
        # Increment the total number of files
        ((total_files++))

        # Get the extension of the file
        ext="${file##*.}"

        # Increment the count of this extension
        ((ext_counts[$ext]++))
    done < <(find "$1" -type f -print0)

    # Print the total number of files
    echo "Total number of files: $total_files"

    # Print the extensions and their counts
    echo "Extensions and their counts:"
    for ext in "${!ext_counts[@]}"; do
        echo "$ext: ${ext_counts[$ext]}"
    done
}

# Export the function so it can be used as a command
export -f summarize_dir

#!/bin/bash

# Function to check if the password contains lowercase letters
contains_lowercase() {
    [[ "$1" =~ [a-z] ]]
}

# Function to check if the password contains uppercase letters
contains_uppercase() {
    [[ "$1" =~ [A-Z] ]]
}

# Function to check if the password contains digits
contains_digit() {
    [[ "$1" =~ [0-9] ]]
}

# Function to check if the password contains special characters
contains_special() {
    [[ "$1" =~ [@_#$%\&*] ]]
}

# Main function to validate the password
validate_password() {
    local password=$1

    # Check length
    if [ ${#password} -lt 8 ]; then
        echo "Weak password: Length should be minimum of 8 characters."
        return 1
    fi

    # Check lowercase
    if ! contains_lowercase "$password"; then
        echo "Weak password: Should contain lowercase letters."
        return 1
    fi

    # Check uppercase
    if ! contains_uppercase "$password"; then
        echo "Weak password: Should contain uppercase letters."
        return 1
    fi

    # Check digit
    if ! contains_digit "$password"; then
        echo "Weak password: Should contain minimum one digit."
        return 1
    fi

    # Check special character
    if ! contains_special "$password"; then
        echo "Weak password: Should contain minimum one special character."
        return 1
    fi

    # Password is strong
    echo "Strong password"
    return 0
}

# Main script

# Check if password is provided as argument
if [ -z "$1" ]; then
    echo "Usage: $0 <password>"
    exit 1
fi

# Validate the password
validate_password "$1"



